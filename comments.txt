name: Xichang Zhao  
login_id: xichangz  
name: Xin He  
login_id: hex1  



All of our source code is in one file, `TestWin.java`. We did not use any libraries except the standard ones from Java's default package.

We exploited the fact that each input of `-` means that it must be an occupied space, and its right-nearest colored piece must be its occupying piece. With this, we're able to achieve `O(n^2)` time complexity for the programme.



# Pseudocode

    dimension = stdin                     // O(1)
    black_captured = 0                    // O(1)
    white_captured = 0                    // O(1)
    game_over = true                      // O(1)

    for dimension number of times         // O(n)
      line < stdin_line                     // O(1)
      captured = 0                          // O(1)
      for every non-space char in line      // O(n)
        if char == '-'                        // O(1)
          captured += 1                       // O(1)
        else if char == '+'                   // O(1)
          game_over = false                   // O(1)
        else if char == 'B'                   // O(1)
          black_captured += captured          // O(1)
          captured = 0                        // O(1)
        else if char == 'W'                   // O(1)
          white_captured += captured          // O(1)
          captured = 0                        // O(1)

    if game_over                          // O(1)
      if black_captured > white_captured  // O(1)
        winner = 'Black'                  // O(1)
      else                                // O(1)
        winner = 'White'                  // O(1)



# Time Complexity of the Algorithm

Let the size of the board be `n * n`.

From the comments in the above code section, we can see that the time complexity will be

    O(1) + O(n) * ( O(1) + O(n) * O(1) ) + O(1) = O(n^2)

